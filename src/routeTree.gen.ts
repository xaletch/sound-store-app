/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppLayoutImport } from './routes/_app/_layout'
import { Route as AppLayoutIndexImport } from './routes/_app/_layout/index'
import { Route as AppLayoutSearchIndexImport } from './routes/_app/_layout/search/index'
import { Route as AppLayoutFoldersIndexImport } from './routes/_app/_layout/folders/index'
import { Route as AppLayoutFavouritesIndexImport } from './routes/_app/_layout/favourites/index'

// Create/Update Routes

const AppLayoutRoute = AppLayoutImport.update({
  id: '/_app/_layout',
  getParentRoute: () => rootRoute,
} as any)

const AppLayoutIndexRoute = AppLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppLayoutRoute,
} as any)

const AppLayoutSearchIndexRoute = AppLayoutSearchIndexImport.update({
  id: '/search/',
  path: '/search/',
  getParentRoute: () => AppLayoutRoute,
} as any)

const AppLayoutFoldersIndexRoute = AppLayoutFoldersIndexImport.update({
  id: '/folders/',
  path: '/folders/',
  getParentRoute: () => AppLayoutRoute,
} as any)

const AppLayoutFavouritesIndexRoute = AppLayoutFavouritesIndexImport.update({
  id: '/favourites/',
  path: '/favourites/',
  getParentRoute: () => AppLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app/_layout': {
      id: '/_app/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_app/_layout/': {
      id: '/_app/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppLayoutIndexImport
      parentRoute: typeof AppLayoutImport
    }
    '/_app/_layout/favourites/': {
      id: '/_app/_layout/favourites/'
      path: '/favourites'
      fullPath: '/favourites'
      preLoaderRoute: typeof AppLayoutFavouritesIndexImport
      parentRoute: typeof AppLayoutImport
    }
    '/_app/_layout/folders/': {
      id: '/_app/_layout/folders/'
      path: '/folders'
      fullPath: '/folders'
      preLoaderRoute: typeof AppLayoutFoldersIndexImport
      parentRoute: typeof AppLayoutImport
    }
    '/_app/_layout/search/': {
      id: '/_app/_layout/search/'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof AppLayoutSearchIndexImport
      parentRoute: typeof AppLayoutImport
    }
  }
}

// Create and export the route tree

interface AppLayoutRouteChildren {
  AppLayoutIndexRoute: typeof AppLayoutIndexRoute
  AppLayoutFavouritesIndexRoute: typeof AppLayoutFavouritesIndexRoute
  AppLayoutFoldersIndexRoute: typeof AppLayoutFoldersIndexRoute
  AppLayoutSearchIndexRoute: typeof AppLayoutSearchIndexRoute
}

const AppLayoutRouteChildren: AppLayoutRouteChildren = {
  AppLayoutIndexRoute: AppLayoutIndexRoute,
  AppLayoutFavouritesIndexRoute: AppLayoutFavouritesIndexRoute,
  AppLayoutFoldersIndexRoute: AppLayoutFoldersIndexRoute,
  AppLayoutSearchIndexRoute: AppLayoutSearchIndexRoute,
}

const AppLayoutRouteWithChildren = AppLayoutRoute._addFileChildren(
  AppLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AppLayoutRouteWithChildren
  '/': typeof AppLayoutIndexRoute
  '/favourites': typeof AppLayoutFavouritesIndexRoute
  '/folders': typeof AppLayoutFoldersIndexRoute
  '/search': typeof AppLayoutSearchIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof AppLayoutIndexRoute
  '/favourites': typeof AppLayoutFavouritesIndexRoute
  '/folders': typeof AppLayoutFoldersIndexRoute
  '/search': typeof AppLayoutSearchIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_app/_layout': typeof AppLayoutRouteWithChildren
  '/_app/_layout/': typeof AppLayoutIndexRoute
  '/_app/_layout/favourites/': typeof AppLayoutFavouritesIndexRoute
  '/_app/_layout/folders/': typeof AppLayoutFoldersIndexRoute
  '/_app/_layout/search/': typeof AppLayoutSearchIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/' | '/favourites' | '/folders' | '/search'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/favourites' | '/folders' | '/search'
  id:
    | '__root__'
    | '/_app/_layout'
    | '/_app/_layout/'
    | '/_app/_layout/favourites/'
    | '/_app/_layout/folders/'
    | '/_app/_layout/search/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppLayoutRoute: typeof AppLayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AppLayoutRoute: AppLayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app/_layout"
      ]
    },
    "/_app/_layout": {
      "filePath": "_app/_layout.tsx",
      "children": [
        "/_app/_layout/",
        "/_app/_layout/favourites/",
        "/_app/_layout/folders/",
        "/_app/_layout/search/"
      ]
    },
    "/_app/_layout/": {
      "filePath": "_app/_layout/index.tsx",
      "parent": "/_app/_layout"
    },
    "/_app/_layout/favourites/": {
      "filePath": "_app/_layout/favourites/index.tsx",
      "parent": "/_app/_layout"
    },
    "/_app/_layout/folders/": {
      "filePath": "_app/_layout/folders/index.tsx",
      "parent": "/_app/_layout"
    },
    "/_app/_layout/search/": {
      "filePath": "_app/_layout/search/index.tsx",
      "parent": "/_app/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
